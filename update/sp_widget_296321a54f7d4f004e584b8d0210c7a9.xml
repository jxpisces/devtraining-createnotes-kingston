<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function($rootScope,$scope,spUtil) {
	/* widget controller */
	var c = this;
	
	//$rootScope.loginFlag = true;
	$scope.loginOkay = true;
	
	// Listen to event from the "NoteLogin" widget.
	//$rootScope.$emit('loginNote', $scope.userEmail, $scope.userPwd);
	
	//$rootScope.$emit('loginNote', $scope.userEmail, $scope.userPwd, $scope.loginOkay);
	
	
	c.email = '';
	c.pwd = '';
	
	
	$rootScope.$on('loginNote', function(event,data) { 
		
	
		//$rootScope.loginFlag = false;
		//$scope.loginOkay = $rootScope.loginFlag;
		
		console.log("after log in, event is:\n");
		console.log(event);
		console.log("after log in, data is:\n");
		console.log(data);
		
		
		c.email = data.email;
		c.pwd = data.pwd;
		
		//console.log("accepted email is: "+ c.email + "; and accepted pwd is: " + c.pwd);
		
		//Interacts with database "User table" to check current user name and pwd
		//are recoreded.
		c.server.get({
			action: 'checkID',
			logInEmail : c.email,
			logPwd : c.pwd
		}).then(function(r){
			console.log("after id check from db, the idCorrect flag is: ");
			console.log(r.data.idCorrect);
			$scope.loginOkay = r.data.idCorrect;
			$rootScope.$emit('acLogin', r.data.idCorrect);
		});
		
		
		
	});
	
	c.logout = function() {
		$scope.loginOkay = false;
		$rootScope.$emit('logoutNote', !$scope.loginOkay);
	}
	
	
	// Use a position indicator to know which record to update
	c.notePos = 0;
	c.selectItem = function(idx) {  
		// Set the position indicator to the index value passed in on select
		c.notePos = idx;
		var id = c.data.notes[idx].sys_id;
		console.log('Note ID: ' + id);
		$rootScope.noteID = id;
		$rootScope.$emit('selectNote', id);
	}
	// Subscribe to event.  Set the new title and note values on the 
	// c.data object
	$rootScope.$on('updateTitle', function(event,data) { 
		c.data.notes[c.notePos].title = data.title;
		c.data.notes[c.notePos].note = data.note;
	});

	c.newNote = function() {
		c.server.get({
			action: 'newNote'
		}).then(function(r) {
			c.data.notes.unshift(r.data.newNote);
			c.data.noteID = r.data.noteID;
			$rootScope.noteID = c.data.noteID;
			$rootScope.$emit('selectNote', c.data.noteID);
		});
	}

	$rootScope.$on('deleteNote', function(event,data) {
		c.data.notes.splice($scope.notePos, 1);
	});

	// Record removed from data object on the client and passed to server
	c.snNoteUpdate = function(name,sysID){

		for (var i=0;i<c.data.notes.length;i++){
			if(c.data.notes[i].sys_id == name.data.sys_id){
				if(name.data.record.note){
					c.data.notes[i].note = name.data.record.note.display_value;
				}
				if(name.data.record.title){
					c.data.notes[i].title = name.data.record.title.display_value;
				}
				c.server.update();

			}
		}
	}

	// Record removed from data object on the server and passed back to client
	c.snNoteDelete = function(sysID){

		c.server.get({
			action: 'snDeleteNote',
			noteID: sysID

		}).then(function(r){
			c.data.notes = r.data.notes;
		});

	}

	spUtil.recordWatch($scope, "x_snc_createnotes_note", "numberANYTHING", function(name) {
		console.log(name.data.operation); 
		console.log(name); 
		// Calls a Client Script function to do the update and pass the updated data object
		// to the server.
		if(name.data.operation == "update"){
			c.snNoteUpdate(name, name.data.sys_id);
		}
		// Calls a Client Script function which does the update on the server and passes
		// the updated data object back to the client.
		if(name.data.operation == "delete"){
			c.snNoteDelete(name.data.sys_id);
		}
		// Fast and easy... replace the client data object with the server data object
		if(name.data.operation == "insert"){
			c.server.refresh();
		}
	});
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>h3.panel-title {
  font-size:20px;
  padding-top:5px;
}
.delete{
	float: right;
  color: red;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link/>
        <name>Notes List</name>
        <option_schema>[{"hint":"Specify a title for the Notes List widget","name":"title","default_value":"Notes","label":"Title","type":"string"},{"hint":"Select the maximum number of records to display","name":"maximum_records_to_display","default_value":"5","label":"Maximum records to display","type":"choice","choices":[{"label":"2","value":"2"},{"label":"3","value":"3"},{"label":"5","value":"5"},{"label":"7","value":"7"},{"label":"11","value":"11"},{"label":"13","value":"13"},{"label":"17","value":"17"}]}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.notes = [];
	var noteGR = new GlideRecord('x_snc_createnotes_note');
	noteGR.addQuery('user', gs.getUser().getID());
	noteGR.orderByDesc('sys_created_on');
	noteGR.setLimit(options.maximum_records_to_display);
	noteGR.query();
	while (noteGR.next()) {
		var noteObj = {};

		$sp.getRecordDisplayValues(noteObj, noteGR, 'number,title,sys_id');

		noteObj.note = noteGR.getValue('note').slice(0,20);

		data.notes.push(noteObj);
	}

	if (input) {
		if (input.action == 'newNote') {
			var newNote = new GlideRecord('x_snc_createnotes_note');
			newNote.newRecord();
			var id = newNote.insert();
			data.noteID = id;
			data.newNote = {};
			$sp.getRecordValues(data.newNote,newNote,"title,note,sys_id");
		}

		if (input.action == 'snDeleteNote') {
			var delNote = new GlideRecord('x_snc_createnotes_note');
			// The notes record should already be gone.  Just
			// making sure it no longer exists.
			if(delNote.get(input.noteID)){
				delNote.deleteRecord();
			}
		}
		
		if (input.action == 'checkID') {
			console.log("after accepting user info from login widget");
			//console.log(input.logInEmail);
			//console.log("input pwd is: \n");
			//console.log(input.logPwd);
			var checkID = new GlideRecord('x_snc_createnotes_loginuser');
			checkID.get('email', input.logInEmail);
			var curPwd = checkID.getValue('password');
			/*console.log("db pwd is: \n");
			console.log(curPwd);
			console.log('\n');
				console.log('\n');
			console.log(curPwd == input.logPwd);
			console.log(curPwd === input.logPwd);
				console.log('\n');
				console.log('\n');
				*/
			data.idCorrect = curPwd == input.logPwd;
			/*if (data.idCorrect) {
				//Populates "Last Login" field for the current user.
				var gdt = new GlideDateTime();
				//console.log("the last login is: \n");
				//console.log(gdt.getTime());
				//console.log(gdt.getLocalTime());
				
				//console.log(gdt.getDate());
				//console.log(gdt.getLocalDate());
				//checkID.last_login = gdt.getLocalTime();
				//checkID.update();
			}
			*/
			//console.log("at db, idCorrect");
			//console.log(data.idCorrect);
			/*if (curPwd == input.logPwd) {
				
			} else {
				
			}
			*/
		}

	}
}
)();

]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-10-14 01:08:53</sys_created_on>
        <sys_id>296321a54f7d4f004e584b8d0210c7a9</sys_id>
        <sys_mod_count>136</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_296321a54f7d4f004e584b8d0210c7a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-01 23:41:00</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" ng-show="loginOkay">

  <button type="button" class="btn btn-primary" ng-click="c.logout()" >Logout</button>


  <div class="panel-heading clearfix">
    <h3 class="panel-title pull-left">
      {{::c.options.title}}
    </h3>
    <button class="btn btn-default pull-right" ng-click="c.newNote()"> 
      <span class="glyphicon glyphicon-plus"></span> 
    </button>
  </div>

  <div class="panel-body"> 
    <input placeholder="Filter" class="form-control" ng-model="noteFilter" /> 
  </div>

  
  
  
  
  <div class="list-group">
    <a class="list-group-item" ng-click="c.selectItem($index)" ng-repeat="note in data.notes | filter: noteFilter">
      
      <p><Strong>Title: </Strong>{{note.title}}</p>
      
     
      
      <p class="list-group-item-text"><Strong>Note:</Strong>
      
        {{note.note}}
      </p>
			
      
      <form>

				<Strong>Status: </Strong>
        <select id="status">
          <option>-------</option>
        <option>Completed</option>
        <option>Uncompleted</option>
        
      </select>
       

      
        <button class="delete" >Delete</button>
      </form>
			

  
    </a>
  </div>
  
</div>]]></template>
    </sp_widget>
</record_update>
